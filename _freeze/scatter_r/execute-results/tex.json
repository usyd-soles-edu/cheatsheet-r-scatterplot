{
  "hash": "b615fa0f7994e17f46bbf80b997e027b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Boxplots in R with `ggplot2`\nsubtitle: Cheatsheet\ndate: today\n---\n\n\n\n\n\n> This work was developed using resources that are available under a [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/), made available on the [SOLES Open Educational Resources](https://github.com/usyd-soles-edu) repository by the School of Life and Environmental Sciences, The University of Sydney.\n\n\n\n\n\n\n\n::: {.cell layout-ncol=\"3\"}\n::: {.cell-output-display}\n![](scatter_r_files/figure-pdf/unnamed-chunk-1-1.pdf)\n:::\n\n::: {.cell-output-display}\n![](scatter_r_files/figure-pdf/unnamed-chunk-1-2.pdf)\n:::\n\n::: {.cell-output-display}\n![](scatter_r_files/figure-pdf/unnamed-chunk-1-3.pdf)\n:::\n:::\n\n\n\n\n\n## About {.unnumbered}\nThe **boxplot** is a visual representation of a dataset's distribution, showing the median, quartiles, and outliers. It is useful for comparing distributions between groups and identifying outliers within a single group.\n\n::: {.callout-note collapse=\"true\"}\n## Assumed knowledge\n- You know how to install and load packages in R.\n- You know how to import data into R.\n- You recognise data frames and vectors.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Data structure\n\nYour data should be **structured** in a way that makes it *easy* to plot. The ideal structure is **long**, i.e. one where each column represents a variable and each row an observation (@fig-longwide). You can either reshape your data in R or **move cells manually** in a spreadsheet program to achieve the desired structure. For boxplots comparing more than one group of data, a **categorical variable** representing the group should be present in the data.\n\n![Long data (left) where each column is a different variable -- e.g. `Sex` is categorical and `BW` is the measured, continuous response -- is preferred over wide data (right), as it makes it easier to manipulate data when plotting.](longwide.png){#fig-longwide}\n:::\n\n## Data\n\nFor this cheatsheet we will use part of the possums dataset used in [BIOL2022](https://www.sydney.edu.au/units/BIOL2022) labs.\n\n\n\n\n\n{{< downloadthis possum_bw.xlsx dname=\"possum_bw\" label=\"Download the possums data\" type=\"primary\" >}}\n\n\n\n\n\n\n\n\n## Import data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl) # load the readxl package\npossums <- read_excel(\"possum_bw.xlsx\") # read file, store as \"possums\" object\n```\n:::\n\n\n\n\n\n<!-- ## Plot\n\nBelow are multiple versions of a boxplot comparing the body weight, `BW`, of possums between two groups defined by the `Sex` variable. Use the code snippets and their different implementations to understand how to customise your boxplot.\n\n::: panel-tabset\n\n## Version 1\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2) # <1>\nggplot(possums, aes(x = Sex, y = BW)) + # <2>\n  geom_boxplot() # <3>\n```\n\n::: {.cell-output-display}\n![](scatter_r_files/figure-pdf/unnamed-chunk-3-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n1. The `library()` function loads a package. Here, we load the `ggplot2` package to enable the functions required to create the plot.\n2. The `ggplot()` function creates a plot canvas. The `aes()` function specifies the aesthetic mappings, i.e. which variables are mapped to the x and y axes.\n3. Once the canvas is defined, the data can be added automatically using `geom_*()` functions. Here, `geom_boxplot()` adds the boxplot to the canvas, structured according to the aesthetic mappings.\n\n## Version 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2) \nggplot(possums, aes(x = Sex, y = BW)) + \n  geom_boxplot(fill = \"slateblue\") + # <1>\n  xlab(\"Sex\") + # <2>\n  ylab(\"Body weight (g)\") + \n  theme_classic() # <3>\n```\n\n::: {.cell-output-display}\n![](scatter_r_files/figure-pdf/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n1. Adding a `fill` argument to the `geom_boxplot()` function changes the colour of the boxplot.\n2. `xlab()` and `ylab()` add labels to the x and y axes, respectively.\n3. An optional step, `theme_classic()` changes the plot's appearance without needing to specify complex customisations.\n\n## Version 3\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2) \nggplot(possums, aes(x = BW, y = Sex, fill = Sex)) + # <1>\n  geom_boxplot() +\n  xlab(\"Body weight (g)\") + \n  ylab(\"Sex\") + \n  theme_minimal() + \n  scale_fill_manual(values = c(\"salmon\", \"slateblue\")) # <2>\n```\n\n::: {.cell-output-display}\n![](scatter_r_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n 1. The `Sex` variable is mapped to the y-axis and the `BW` variable to the x-axis. The `fill` aesthetic is used to colour the boxplots by the `Sex` variable.\n 2. The `scale_fill_manual()` function allows you to manually set the colours of the boxplots defined by the `fill` aesthetic in the `aes()` function above. There must be one colour for each level of the `Sex` variable.\n\n## Version 4\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2) \nggplot(possums) +\n  aes(x = Sex, y = BW) + # <1>\n  geom_boxplot(width = .3, fill = \"beige\") + # <2>\n  geom_point( # <3>\n    position = position_nudge(x = -.3), # <4>\n    shape = 95, size = 24, alpha = .25 # <5>\n  ) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](scatter_r_files/figure-pdf/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n1. The `aes()` function is placed outside the `ggplot()` function, allowing the aesthetic mappings to be used across multiple `geom_*()` functions.\n2. `geom_boxplot()` can be customised further using the `width` argument to change the width of the boxplots.\n3. `geom_point()` adds points to the plot.\n4. The `position_nudge()` function moves the points to the left of the boxplots by -0.3 units.\n5. The `shape`, `size`, and `alpha` arguments customise the appearance of the points, resulting in a different visual representation of the data \"points\".\n\n## Version 5\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2) \nplot1 <- \n  ggplot(possums) +\n  aes(x = Sex, y = BW) # <1> \n\nplot1 + # <2>\n  geom_boxplot() +\n  geom_point(\n    position = position_jitter(width = .05, seed = 0), # <3>\n    size = 4, alpha = .5,\n    colour = \"firebrick\"\n  ) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](scatter_r_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n1. It is possible to save current work on a plot for later use by assigning it to an object, e.g. `plot1`.\n2. To continue working on the plot, use the `+` operator on the saved object and continue adding layers.\n3. The `position_jitter()` function adds a small amount of random noise to the points, preventing them from overlapping. The `seed` argument ensures the noise is consistent across multiple plots.\n:::\n\n\n## More resources\n\n- [R colors](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf) -- a good resource for choosing colours using words in R.\n- [Beyond bar and box plots](https://z3tt.github.io/beyond-bar-and-box-plots/) -- alternative visualisation methods in R for comparing groups.\n- [Boxplot -- the R Graph Gallery](https://r-graph-gallery.com/boxplot.html) -- a gallery of boxplot examples in R. -->",
    "supporting": [
      "scatter_r_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}